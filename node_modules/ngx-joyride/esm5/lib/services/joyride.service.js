/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/joyride.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { JoyrideStepService } from './joyride-step.service';
import { JoyrideOptionsService } from './joyride-options.service';
import { of } from 'rxjs';
import { finalize } from 'rxjs/operators';
import { JoyrideStepInfo } from '../models/joyride-step-info.class';
import { isPlatformBrowser } from '@angular/common';
var JoyrideService = /** @class */ (function () {
    function JoyrideService(platformId, stepService, optionsService) {
        this.platformId = platformId;
        this.stepService = stepService;
        this.optionsService = optionsService;
        this.tourInProgress = false;
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    JoyrideService.prototype.startTour = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (!isPlatformBrowser(this.platformId)) {
            return of(new JoyrideStepInfo());
        }
        if (!this.tourInProgress) {
            this.tourInProgress = true;
            if (options) {
                this.optionsService.setOptions(options);
            }
            this.tour$ = this.stepService.startTour().pipe(finalize((/**
             * @return {?}
             */
            function () { return (_this.tourInProgress = false); })));
            this.tour$.subscribe();
        }
        return this.tour$;
    };
    /**
     * @return {?}
     */
    JoyrideService.prototype.closeTour = /**
     * @return {?}
     */
    function () {
        if (this.isTourInProgress())
            this.stepService.close();
    };
    /**
     * @return {?}
     */
    JoyrideService.prototype.isTourInProgress = /**
     * @return {?}
     */
    function () {
        return this.tourInProgress;
    };
    JoyrideService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    JoyrideService.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: JoyrideStepService },
        { type: JoyrideOptionsService }
    ]; };
    return JoyrideService;
}());
export { JoyrideService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    JoyrideService.prototype.tourInProgress;
    /**
     * @type {?}
     * @private
     */
    JoyrideService.prototype.tour$;
    /**
     * @type {?}
     * @private
     */
    JoyrideService.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    JoyrideService.prototype.stepService;
    /**
     * @type {?}
     * @private
     */
    JoyrideService.prototype.optionsService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam95cmlkZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWpveXJpZGUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvam95cmlkZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWxFLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVwRDtJQUtJLHdCQUNpQyxVQUFrQixFQUM5QixXQUErQixFQUMvQixjQUFxQztRQUZ6QixlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQzlCLGdCQUFXLEdBQVgsV0FBVyxDQUFvQjtRQUMvQixtQkFBYyxHQUFkLGNBQWMsQ0FBdUI7UUFObEQsbUJBQWMsR0FBWSxLQUFLLENBQUM7SUFPckMsQ0FBQzs7Ozs7SUFFSixrQ0FBUzs7OztJQUFULFVBQVUsT0FBd0I7UUFBbEMsaUJBYUM7UUFaRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3JDLE9BQU8sRUFBRSxDQUFDLElBQUksZUFBZSxFQUFFLENBQUMsQ0FBQztTQUNwQztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1lBQzNCLElBQUksT0FBTyxFQUFFO2dCQUNULElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzNDO1lBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFROzs7WUFBQyxjQUFNLE9BQUEsQ0FBQyxLQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxFQUE3QixDQUE2QixFQUFDLENBQUMsQ0FBQztZQUM5RixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7Ozs7SUFFRCxrQ0FBUzs7O0lBQVQ7UUFDSSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDMUQsQ0FBQzs7OztJQUVELHlDQUFnQjs7O0lBQWhCO1FBQ0ksT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQy9CLENBQUM7O2dCQWhDSixVQUFVOzs7O2dCQU1zQyxNQUFNLHVCQUE5QyxNQUFNLFNBQUMsV0FBVztnQkFkbEIsa0JBQWtCO2dCQUNsQixxQkFBcUI7O0lBd0M5QixxQkFBQztDQUFBLEFBakNELElBaUNDO1NBaENZLGNBQWM7Ozs7OztJQUN2Qix3Q0FBd0M7Ozs7O0lBQ3hDLCtCQUEyQzs7Ozs7SUFHdkMsb0NBQStDOzs7OztJQUMvQyxxQ0FBZ0Q7Ozs7O0lBQ2hELHdDQUFzRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSm95cmlkZVN0ZXBTZXJ2aWNlIH0gZnJvbSAnLi9qb3lyaWRlLXN0ZXAuc2VydmljZSc7XHJcbmltcG9ydCB7IEpveXJpZGVPcHRpb25zU2VydmljZSB9IGZyb20gJy4vam95cmlkZS1vcHRpb25zLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBKb3lyaWRlT3B0aW9ucyB9IGZyb20gJy4uL21vZGVscy9qb3lyaWRlLW9wdGlvbnMuY2xhc3MnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgSm95cmlkZVN0ZXBJbmZvIH0gZnJvbSAnLi4vbW9kZWxzL2pveXJpZGUtc3RlcC1pbmZvLmNsYXNzJztcclxuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSm95cmlkZVNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSB0b3VySW5Qcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSB0b3VyJDogT2JzZXJ2YWJsZTxKb3lyaWRlU3RlcEluZm8+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogT2JqZWN0LFxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc3RlcFNlcnZpY2U6IEpveXJpZGVTdGVwU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnNTZXJ2aWNlOiBKb3lyaWRlT3B0aW9uc1NlcnZpY2VcclxuICAgICkge31cclxuXHJcbiAgICBzdGFydFRvdXIob3B0aW9ucz86IEpveXJpZGVPcHRpb25zKTogT2JzZXJ2YWJsZTxKb3lyaWRlU3RlcEluZm8+IHtcclxuICAgICAgICBpZiAoIWlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9mKG5ldyBKb3lyaWRlU3RlcEluZm8oKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy50b3VySW5Qcm9ncmVzcykge1xyXG4gICAgICAgICAgICB0aGlzLnRvdXJJblByb2dyZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc1NlcnZpY2Uuc2V0T3B0aW9ucyhvcHRpb25zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnRvdXIkID0gdGhpcy5zdGVwU2VydmljZS5zdGFydFRvdXIoKS5waXBlKGZpbmFsaXplKCgpID0+ICh0aGlzLnRvdXJJblByb2dyZXNzID0gZmFsc2UpKSk7XHJcbiAgICAgICAgICAgIHRoaXMudG91ciQuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnRvdXIkO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlVG91cigpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5pc1RvdXJJblByb2dyZXNzKCkpIHRoaXMuc3RlcFNlcnZpY2UuY2xvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBpc1RvdXJJblByb2dyZXNzKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvdXJJblByb2dyZXNzO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==