/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/joyride-steps-container.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { JoyrideOptionsService } from './joyride-options.service';
import { LoggerService } from './logger.service';
import { JoyrideError, JoyrideStepOutOfRange } from '../models/joyride-error.class';
/** @type {?} */
var ROUTE_SEPARATOR = '@';
var Step = /** @class */ (function () {
    function Step() {
    }
    return Step;
}());
if (false) {
    /** @type {?} */
    Step.prototype.id;
    /** @type {?} */
    Step.prototype.step;
}
/** @enum {string} */
var StepActionType = {
    NEXT: "NEXT",
    PREV: "PREV",
};
export { StepActionType };
var JoyrideStepsContainerService = /** @class */ (function () {
    function JoyrideStepsContainerService(stepOptions, logger) {
        this.stepOptions = stepOptions;
        this.logger = logger;
        this.tempSteps = [];
        this.currentStepIndex = -2;
        this.stepHasBeenModified = new Subject();
    }
    /**
     * @private
     * @return {?}
     */
    JoyrideStepsContainerService.prototype.getFirstStepIndex = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var firstStep = this.stepOptions.getFirstStep();
        /** @type {?} */
        var stepIds = this.stepOptions.getStepsOrder();
        /** @type {?} */
        var index = stepIds.indexOf(firstStep);
        if (index < 0) {
            index = 0;
            if (firstStep !== undefined)
                this.logger.warn("The step " + firstStep + " does not exist. Check in your step list if it's present.");
        }
        return index;
    };
    /**
     * @return {?}
     */
    JoyrideStepsContainerService.prototype.init = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.logger.info('Initializing the steps array.');
        this.steps = [];
        this.currentStepIndex = this.getFirstStepIndex() - 1;
        /** @type {?} */
        var stepIds = this.stepOptions.getStepsOrder();
        stepIds.forEach((/**
         * @param {?} stepId
         * @return {?}
         */
        function (stepId) { return _this.steps.push({ id: stepId, step: null }); }));
    };
    /**
     * @param {?} stepToAdd
     * @return {?}
     */
    JoyrideStepsContainerService.prototype.addStep = /**
     * @param {?} stepToAdd
     * @return {?}
     */
    function (stepToAdd) {
        /** @type {?} */
        var stepExist = this.tempSteps.filter((/**
         * @param {?} step
         * @return {?}
         */
        function (step) { return step.name === stepToAdd.name; })).length > 0;
        if (!stepExist) {
            this.logger.info("Adding step " + stepToAdd.name + " to the steps list.");
            this.tempSteps.push(stepToAdd);
        }
        else {
            /** @type {?} */
            var stepIndexToReplace = this.tempSteps.findIndex((/**
             * @param {?} step
             * @return {?}
             */
            function (step) { return step.name === stepToAdd.name; }));
            this.tempSteps[stepIndexToReplace] = stepToAdd;
        }
    };
    /**
     * @param {?} action
     * @return {?}
     */
    JoyrideStepsContainerService.prototype.get = /**
     * @param {?} action
     * @return {?}
     */
    function (action) {
        if (action === StepActionType.NEXT)
            this.currentStepIndex++;
        else
            this.currentStepIndex--;
        if (this.currentStepIndex < 0 || this.currentStepIndex >= this.steps.length)
            throw new JoyrideStepOutOfRange('The first or last step of the tour cannot be found!');
        /** @type {?} */
        var stepName = this.getStepName(this.steps[this.currentStepIndex].id);
        /** @type {?} */
        var index = this.tempSteps.findIndex((/**
         * @param {?} step
         * @return {?}
         */
        function (step) { return step.name === stepName; }));
        /** @type {?} */
        var stepFound = this.tempSteps[index];
        this.steps[this.currentStepIndex].step = stepFound;
        if (stepFound == null) {
            this.logger.warn("Step " + this.steps[this.currentStepIndex].id + " not found in the DOM. Check if it's hidden by *ngIf directive.");
        }
        return stepFound;
    };
    /**
     * @param {?} action
     * @return {?}
     */
    JoyrideStepsContainerService.prototype.getStepRoute = /**
     * @param {?} action
     * @return {?}
     */
    function (action) {
        /** @type {?} */
        var stepID;
        if (action === StepActionType.NEXT) {
            stepID = this.steps[this.currentStepIndex + 1] ? this.steps[this.currentStepIndex + 1].id : null;
        }
        else {
            stepID = this.steps[this.currentStepIndex - 1] ? this.steps[this.currentStepIndex - 1].id : null;
        }
        /** @type {?} */
        var stepRoute = stepID && stepID.includes(ROUTE_SEPARATOR) ? stepID.split(ROUTE_SEPARATOR)[1] : '';
        return stepRoute;
    };
    /**
     * @param {?} stepName
     * @param {?} position
     * @return {?}
     */
    JoyrideStepsContainerService.prototype.updatePosition = /**
     * @param {?} stepName
     * @param {?} position
     * @return {?}
     */
    function (stepName, position) {
        /** @type {?} */
        var index = this.getStepIndex(stepName);
        if (this.steps[index].step) {
            this.steps[index].step.position = position;
            this.stepHasBeenModified.next(this.steps[index].step);
        }
        else {
            this.logger.warn("Trying to modify the position of " + stepName + " to " + position + ". Step not found!Is this step located in a different route?");
        }
    };
    /**
     * @param {?} stepName
     * @return {?}
     */
    JoyrideStepsContainerService.prototype.getStepNumber = /**
     * @param {?} stepName
     * @return {?}
     */
    function (stepName) {
        return this.getStepIndex(stepName) + 1;
    };
    /**
     * @return {?}
     */
    JoyrideStepsContainerService.prototype.getStepsCount = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var stepsOrder = this.stepOptions.getStepsOrder();
        return stepsOrder.length;
    };
    /**
     * @private
     * @param {?} stepName
     * @return {?}
     */
    JoyrideStepsContainerService.prototype.getStepIndex = /**
     * @private
     * @param {?} stepName
     * @return {?}
     */
    function (stepName) {
        /** @type {?} */
        var index = this.steps
            .map((/**
         * @param {?} step
         * @return {?}
         */
        function (step) { return (step.id.includes(ROUTE_SEPARATOR) ? step.id.split(ROUTE_SEPARATOR)[0] : step.id); }))
            .findIndex((/**
         * @param {?} name
         * @return {?}
         */
        function (name) { return stepName === name; }));
        if (index === -1)
            throw new JoyrideError("The step with name: " + stepName + " does not exist in the step list.");
        return index;
    };
    /**
     * @private
     * @param {?} stepID
     * @return {?}
     */
    JoyrideStepsContainerService.prototype.getStepName = /**
     * @private
     * @param {?} stepID
     * @return {?}
     */
    function (stepID) {
        /** @type {?} */
        var stepName = stepID && stepID.includes(ROUTE_SEPARATOR) ? stepID.split(ROUTE_SEPARATOR)[0] : stepID;
        return stepName;
    };
    JoyrideStepsContainerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    JoyrideStepsContainerService.ctorParameters = function () { return [
        { type: JoyrideOptionsService },
        { type: LoggerService }
    ]; };
    return JoyrideStepsContainerService;
}());
export { JoyrideStepsContainerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    JoyrideStepsContainerService.prototype.steps;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepsContainerService.prototype.tempSteps;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepsContainerService.prototype.currentStepIndex;
    /** @type {?} */
    JoyrideStepsContainerService.prototype.stepHasBeenModified;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepsContainerService.prototype.stepOptions;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepsContainerService.prototype.logger;
}
//# sourceMappingURL=data:application/json;base64,