/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/step-drawer.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, ApplicationRef, Injector } from '@angular/core';
import { JoyrideStepComponent } from '../components';
var StepDrawerService = /** @class */ (function () {
    function StepDrawerService(componentFactoryResolver, appRef, injector) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
        this.refMap = {};
    }
    /**
     * @param {?} step
     * @return {?}
     */
    StepDrawerService.prototype.draw = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        // 1. Create a component reference from the component
        /** @type {?} */
        var ref = this.componentFactoryResolver
            .resolveComponentFactory(JoyrideStepComponent)
            .create(this.injector);
        // 2. Attach component to the appRef so that it's inside the ng component tree
        this.appRef.attachView(ref.hostView);
        // 3. Get DOM element from component
        /** @type {?} */
        var domElem = (/** @type {?} */ (((/** @type {?} */ (ref.hostView)))
            .rootNodes[0]));
        // 4. Append DOM element to the body
        document.body.appendChild(domElem);
        /** @type {?} */
        var instance = ref.instance;
        instance.step = step;
        ref.changeDetectorRef.detectChanges();
        step.stepInstance = instance;
        this.refMap[step.name] = ref;
    };
    /**
     * @param {?} step
     * @return {?}
     */
    StepDrawerService.prototype.remove = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        this.appRef.detachView(this.refMap[step.name].hostView);
        this.refMap[step.name].destroy();
    };
    StepDrawerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    StepDrawerService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ApplicationRef },
        { type: Injector }
    ]; };
    return StepDrawerService;
}());
export { StepDrawerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    StepDrawerService.prototype.refMap;
    /**
     * @type {?}
     * @private
     */
    StepDrawerService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    StepDrawerService.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    StepDrawerService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcC1kcmF3ZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1qb3lyaWRlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3N0ZXAtZHJhd2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0gsVUFBVSxFQUVWLHdCQUF3QixFQUN4QixjQUFjLEVBQ2QsUUFBUSxFQUVYLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdyRDtJQUlJLDJCQUNxQix3QkFBa0QsRUFDM0QsTUFBc0IsRUFDdEIsUUFBa0I7UUFGVCw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO1FBQzNELFdBQU0sR0FBTixNQUFNLENBQWdCO1FBQ3RCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFMdEIsV0FBTSxHQUEwRCxFQUFFLENBQUM7SUFNeEUsQ0FBQzs7Ozs7SUFFSixnQ0FBSTs7OztJQUFKLFVBQUssSUFBaUI7OztZQUVaLEdBQUcsR0FBdUMsSUFBSSxDQUFDLHdCQUF3QjthQUN4RSx1QkFBdUIsQ0FBQyxvQkFBb0IsQ0FBQzthQUM3QyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUUxQiw4RUFBOEU7UUFDOUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs7WUFHL0IsT0FBTyxHQUFHLG1CQUFBLENBQUMsbUJBQUEsR0FBRyxDQUFDLFFBQVEsRUFBd0IsQ0FBQzthQUNqRCxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQWU7UUFFaEMsb0NBQW9DO1FBQ3BDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDOztZQUU3QixRQUFRLEdBQXlCLEdBQUcsQ0FBQyxRQUFRO1FBQ25ELFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN0QyxJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQztRQUU3QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDakMsQ0FBQzs7Ozs7SUFFRCxrQ0FBTTs7OztJQUFOLFVBQU8sSUFBaUI7UUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDckMsQ0FBQzs7Z0JBckNKLFVBQVU7Ozs7Z0JBUlAsd0JBQXdCO2dCQUN4QixjQUFjO2dCQUNkLFFBQVE7O0lBNENaLHdCQUFDO0NBQUEsQUF0Q0QsSUFzQ0M7U0FyQ1ksaUJBQWlCOzs7Ozs7SUFDMUIsbUNBQTJFOzs7OztJQUd2RSxxREFBbUU7Ozs7O0lBQ25FLG1DQUE4Qjs7Ozs7SUFDOUIscUNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIEluamVjdGFibGUsXHJcbiAgICBDb21wb25lbnRSZWYsXHJcbiAgICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICBBcHBsaWNhdGlvblJlZixcclxuICAgIEluamVjdG9yLFxyXG4gICAgRW1iZWRkZWRWaWV3UmVmXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEpveXJpZGVTdGVwQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cyc7XHJcbmltcG9ydCB7IEpveXJpZGVTdGVwIH0gZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFN0ZXBEcmF3ZXJTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgcmVmTWFwOiB7IFtrZXk6IHN0cmluZ106IENvbXBvbmVudFJlZjxKb3lyaWRlU3RlcENvbXBvbmVudD4gfSA9IHt9O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICAgICAgcHJpdmF0ZSBhcHBSZWY6IEFwcGxpY2F0aW9uUmVmLFxyXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yXHJcbiAgICApIHt9XHJcblxyXG4gICAgZHJhdyhzdGVwOiBKb3lyaWRlU3RlcCkge1xyXG4gICAgICAgIC8vIDEuIENyZWF0ZSBhIGNvbXBvbmVudCByZWZlcmVuY2UgZnJvbSB0aGUgY29tcG9uZW50XHJcbiAgICAgICAgY29uc3QgcmVmOiBDb21wb25lbnRSZWY8Sm95cmlkZVN0ZXBDb21wb25lbnQ+ID0gdGhpcy5jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJcclxuICAgICAgICAgICAgLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KEpveXJpZGVTdGVwQ29tcG9uZW50KVxyXG4gICAgICAgICAgICAuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xyXG5cclxuICAgICAgICAvLyAyLiBBdHRhY2ggY29tcG9uZW50IHRvIHRoZSBhcHBSZWYgc28gdGhhdCBpdCdzIGluc2lkZSB0aGUgbmcgY29tcG9uZW50IHRyZWVcclxuICAgICAgICB0aGlzLmFwcFJlZi5hdHRhY2hWaWV3KHJlZi5ob3N0Vmlldyk7XHJcblxyXG4gICAgICAgIC8vIDMuIEdldCBET00gZWxlbWVudCBmcm9tIGNvbXBvbmVudFxyXG4gICAgICAgIGNvbnN0IGRvbUVsZW0gPSAocmVmLmhvc3RWaWV3IGFzIEVtYmVkZGVkVmlld1JlZjxhbnk+KVxyXG4gICAgICAgICAgICAucm9vdE5vZGVzWzBdIGFzIEhUTUxFbGVtZW50O1xyXG5cclxuICAgICAgICAvLyA0LiBBcHBlbmQgRE9NIGVsZW1lbnQgdG8gdGhlIGJvZHlcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvbUVsZW0pO1xyXG5cclxuICAgICAgICBjb25zdCBpbnN0YW5jZTogSm95cmlkZVN0ZXBDb21wb25lbnQgPSByZWYuaW5zdGFuY2U7XHJcbiAgICAgICAgaW5zdGFuY2Uuc3RlcCA9IHN0ZXA7XHJcbiAgICAgICAgcmVmLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICBzdGVwLnN0ZXBJbnN0YW5jZSA9IGluc3RhbmNlO1xyXG5cclxuICAgICAgICB0aGlzLnJlZk1hcFtzdGVwLm5hbWVdID0gcmVmO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZShzdGVwOiBKb3lyaWRlU3RlcCkge1xyXG4gICAgICAgIHRoaXMuYXBwUmVmLmRldGFjaFZpZXcodGhpcy5yZWZNYXBbc3RlcC5uYW1lXS5ob3N0Vmlldyk7XHJcbiAgICAgICAgdGhpcy5yZWZNYXBbc3RlcC5uYW1lXS5kZXN0cm95KCk7XHJcbiAgICB9XHJcbn1cclxuIl19