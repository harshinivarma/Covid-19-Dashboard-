/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/document.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { DomRefService } from './dom.service';
/**
 * @record
 */
export function IDocumentService() { }
if (false) {
    /**
     * @param {?} elementRef
     * @return {?}
     */
    IDocumentService.prototype.getElementFixedTop = function (elementRef) { };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    IDocumentService.prototype.getElementFixedLeft = function (elementRef) { };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    IDocumentService.prototype.getElementAbsoluteTop = function (elementRef) { };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    IDocumentService.prototype.getElementAbsoluteLeft = function (elementRef) { };
    /**
     * @return {?}
     */
    IDocumentService.prototype.setDocumentHeight = function () { };
    /**
     * @return {?}
     */
    IDocumentService.prototype.getDocumentHeight = function () { };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    IDocumentService.prototype.isParentScrollable = function (elementRef) { };
    /**
     * @param {?} elementRef
     * @param {?} isElementFixed
     * @param {?} keywordToDiscard
     * @return {?}
     */
    IDocumentService.prototype.isElementBeyondOthers = function (elementRef, isElementFixed, keywordToDiscard) { };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    IDocumentService.prototype.scrollToTheTop = function (elementRef) { };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    IDocumentService.prototype.scrollToTheBottom = function (elementRef) { };
}
var DocumentService = /** @class */ (function () {
    function DocumentService(DOMService) {
        this.DOMService = DOMService;
        this.setDocumentHeight();
        if (!document.elementsFromPoint) {
            // IE 11 - Edge browsers
            document.elementsFromPoint = this.elementsFromPoint.bind(this);
        }
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    DocumentService.prototype.getElementFixedTop = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        return elementRef.nativeElement.getBoundingClientRect().top;
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    DocumentService.prototype.getElementFixedLeft = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        return elementRef.nativeElement.getBoundingClientRect().left;
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    DocumentService.prototype.getElementAbsoluteTop = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        /** @type {?} */
        var scrollOffsets = this.getScrollOffsets();
        return (elementRef.nativeElement.getBoundingClientRect().top +
            scrollOffsets.y);
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    DocumentService.prototype.getElementAbsoluteLeft = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        /** @type {?} */
        var scrollOffsets = this.getScrollOffsets();
        return (elementRef.nativeElement.getBoundingClientRect().left +
            scrollOffsets.x);
    };
    /**
     * @return {?}
     */
    DocumentService.prototype.setDocumentHeight = /**
     * @return {?}
     */
    function () {
        this.documentHeight = this.calculateDocumentHeight();
    };
    /**
     * @return {?}
     */
    DocumentService.prototype.getDocumentHeight = /**
     * @return {?}
     */
    function () {
        return this.documentHeight;
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    DocumentService.prototype.isParentScrollable = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        return (this.getFirstScrollableParent(elementRef.nativeElement) !==
            this.DOMService.getNativeDocument().body);
    };
    /**
     * @param {?} elementRef
     * @param {?} isElementFixed
     * @param {?} keywordToDiscard
     * @return {?}
     */
    DocumentService.prototype.isElementBeyondOthers = /**
     * @param {?} elementRef
     * @param {?} isElementFixed
     * @param {?} keywordToDiscard
     * @return {?}
     */
    function (elementRef, isElementFixed, keywordToDiscard) {
        /** @type {?} */
        var x1 = isElementFixed
            ? this.getElementFixedLeft(elementRef)
            : this.getElementAbsoluteLeft(elementRef);
        /** @type {?} */
        var y1 = isElementFixed
            ? this.getElementFixedTop(elementRef)
            : this.getElementAbsoluteTop(elementRef);
        /** @type {?} */
        var x2 = x1 + elementRef.nativeElement.getBoundingClientRect().width - 1;
        /** @type {?} */
        var y2 = y1 + elementRef.nativeElement.getBoundingClientRect().height - 1;
        /** @type {?} */
        var elements1 = this.DOMService.getNativeDocument().elementsFromPoint(x1, y1);
        /** @type {?} */
        var elements2 = this.DOMService.getNativeDocument().elementsFromPoint(x2, y2);
        if (elements1.length === 0 && elements2.length === 0)
            return 1;
        if (this.getFirstElementWithoutKeyword(elements1, keywordToDiscard) !==
            elementRef.nativeElement ||
            this.getFirstElementWithoutKeyword(elements2, keywordToDiscard) !==
                elementRef.nativeElement) {
            return 2;
        }
        return 3;
    };
    /**
     * @param {?} elementRef
     * @param {?} isElementFixed
     * @return {?}
     */
    DocumentService.prototype.scrollIntoView = /**
     * @param {?} elementRef
     * @param {?} isElementFixed
     * @return {?}
     */
    function (elementRef, isElementFixed) {
        /** @type {?} */
        var firstScrollableParent = this.getFirstScrollableParent(elementRef.nativeElement);
        /** @type {?} */
        var top = isElementFixed
            ? this.getElementFixedTop(elementRef)
            : this.getElementAbsoluteTop(elementRef);
        if (firstScrollableParent !== this.DOMService.getNativeDocument().body) {
            if (firstScrollableParent.scrollTo) {
                firstScrollableParent.scrollTo(0, top - 150);
            }
            else {
                // IE 11 - Edge browsers
                firstScrollableParent.scrollTop = top - 150;
            }
        }
        else {
            this.DOMService.getNativeWindow().scrollTo(0, top - 150);
        }
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    DocumentService.prototype.scrollToTheTop = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        /** @type {?} */
        var firstScrollableParent = this.getFirstScrollableParent(elementRef.nativeElement);
        if (firstScrollableParent !== this.DOMService.getNativeDocument().body) {
            if (firstScrollableParent.scrollTo) {
                firstScrollableParent.scrollTo(0, 0);
            }
            else {
                // IE 11 - Edge browsers
                firstScrollableParent.scrollTop = 0;
            }
        }
        else {
            this.DOMService.getNativeWindow().scrollTo(0, 0);
        }
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    DocumentService.prototype.scrollToTheBottom = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        /** @type {?} */
        var firstScrollableParent = this.getFirstScrollableParent(elementRef.nativeElement);
        if (firstScrollableParent !== this.DOMService.getNativeDocument().body) {
            if (firstScrollableParent.scrollTo) {
                firstScrollableParent.scrollTo(0, this.DOMService.getNativeDocument().body.scrollHeight);
            }
            else {
                // IE 11 - Edge browsers
                firstScrollableParent.scrollTop =
                    firstScrollableParent.scrollHeight -
                        firstScrollableParent.clientHeight;
            }
        }
        else {
            this.DOMService.getNativeWindow().scrollTo(0, this.DOMService.getNativeDocument().body.scrollHeight);
        }
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    DocumentService.prototype.getFirstScrollableParent = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        /** @type {?} */
        var regex = /(auto|scroll|overlay)/;
        /** @type {?} */
        var style = (/**
         * @param {?} node
         * @param {?} prop
         * @return {?}
         */
        function (node, prop) {
            return _this.DOMService.getNativeWindow()
                .getComputedStyle(node, null)
                .getPropertyValue(prop);
        });
        /** @type {?} */
        var scroll = (/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            return regex.test(style(node, 'overflow') +
                style(node, 'overflow-y') +
                style(node, 'overflow-x'));
        });
        /** @type {?} */
        var scrollparent = (/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            return !node || node === _this.DOMService.getNativeDocument().body
                ? _this.DOMService.getNativeDocument().body
                : scroll(node)
                    ? node
                    : scrollparent(node.parentNode);
        });
        return scrollparent(node);
    };
    /**
     * @private
     * @return {?}
     */
    DocumentService.prototype.calculateDocumentHeight = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var documentRef = this.DOMService.getNativeDocument();
        return Math.max(documentRef.body.scrollHeight, documentRef.documentElement.scrollHeight, documentRef.body.offsetHeight, documentRef.documentElement.offsetHeight, documentRef.body.clientHeight, documentRef.documentElement.clientHeight);
    };
    /**
     * @private
     * @return {?}
     */
    DocumentService.prototype.getScrollOffsets = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var winReference = this.DOMService.getNativeWindow();
        /** @type {?} */
        var docReference = this.DOMService.getNativeDocument();
        // This works for all browsers except IE versions 8 and before
        if (winReference.pageXOffset != null)
            return { x: winReference.pageXOffset, y: winReference.pageYOffset };
        // For IE (or any browser) in Standards mode
        if (docReference.compatMode == 'CSS1Compat')
            return {
                x: docReference.documentElement.scrollLeft,
                y: docReference.documentElement.scrollTop
            };
        // For browsers in Quirks mode
        return {
            x: docReference.body.scrollLeft,
            y: docReference.body.scrollTop
        };
    };
    /**
     * @private
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    DocumentService.prototype.elementsFromPoint = /**
     * @private
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    function (x, y) {
        /** @type {?} */
        var parents = [];
        /** @type {?} */
        var parent = void 0;
        do {
            /** @type {?} */
            var elem = this.DOMService.getNativeDocument().elementFromPoint(x, y);
            if (elem && parent !== elem) {
                parent = elem;
                parents.push(parent);
                parent.style.pointerEvents = 'none';
            }
            else {
                parent = false;
            }
        } while (parent);
        parents.forEach((/**
         * @param {?} parent
         * @return {?}
         */
        function (parent) {
            return (parent.style.pointerEvents = 'all');
        }));
        return parents;
    };
    /**
     * @private
     * @param {?} elements
     * @param {?} keyword
     * @return {?}
     */
    DocumentService.prototype.getFirstElementWithoutKeyword = /**
     * @private
     * @param {?} elements
     * @param {?} keyword
     * @return {?}
     */
    function (elements, keyword) {
        while (elements[0] &&
            elements[0].classList.toString().includes(keyword)) {
            elements.shift();
        }
        return elements[0];
    };
    DocumentService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DocumentService.ctorParameters = function () { return [
        { type: DomRefService }
    ]; };
    return DocumentService;
}());
export { DocumentService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DocumentService.prototype.documentHeight;
    /**
     * @type {?}
     * @private
     */
    DocumentService.prototype.DOMService;
}
//# sourceMappingURL=data:application/json;base64,