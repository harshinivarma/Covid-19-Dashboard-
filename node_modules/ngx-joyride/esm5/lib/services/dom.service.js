/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/dom.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
var DomRefService = /** @class */ (function () {
    function DomRefService(platformId) {
        this.platformId = platformId;
        this.fakeDocument = (/** @type {?} */ ({ body: {}, documentElement: {} }));
        this.fakeWindow = (/** @type {?} */ ({ document: this.fakeDocument, navigator: {} }));
    }
    /**
     * @return {?}
     */
    DomRefService.prototype.getNativeWindow = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platformId))
            return window;
        else
            return this.fakeWindow;
    };
    /**
     * @return {?}
     */
    DomRefService.prototype.getNativeDocument = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platformId))
            return document;
        else
            return this.fakeDocument;
    };
    DomRefService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DomRefService.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return DomRefService;
}());
export { DomRefService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DomRefService.prototype.fakeDocument;
    /**
     * @type {?}
     * @private
     */
    DomRefService.prototype.fakeWindow;
    /**
     * @type {?}
     * @private
     */
    DomRefService.prototype.platformId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtam95cmlkZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9kb20uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVwRDtJQUlJLHVCQUF5QyxVQUFrQjtRQUFsQixlQUFVLEdBQVYsVUFBVSxDQUFRO1FBRm5ELGlCQUFZLEdBQWEsbUJBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLGVBQWUsRUFBRSxFQUFFLEVBQUUsRUFBQSxDQUFDO1FBQ3JFLGVBQVUsR0FBVyxtQkFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsRUFBQSxDQUFDO0lBQ3RCLENBQUM7Ozs7SUFDL0QsdUNBQWU7OztJQUFmO1FBQ0ksSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQUUsT0FBTyxNQUFNLENBQUM7O1lBQ2pELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUNoQyxDQUFDOzs7O0lBRUQseUNBQWlCOzs7SUFBakI7UUFDSSxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7WUFBRSxPQUFPLFFBQVEsQ0FBQzs7WUFDbkQsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQ2xDLENBQUM7O2dCQWJKLFVBQVU7Ozs7Z0JBSThDLE1BQU0sdUJBQTlDLE1BQU0sU0FBQyxXQUFXOztJQVVuQyxvQkFBQztDQUFBLEFBZEQsSUFjQztTQWJZLGFBQWE7Ozs7OztJQUN0QixxQ0FBNkU7Ozs7O0lBQzdFLG1DQUFvRjs7Ozs7SUFDeEUsbUNBQStDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0LCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBEb21SZWZTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgZmFrZURvY3VtZW50OiBEb2N1bWVudCA9IDxEb2N1bWVudD57IGJvZHk6IHt9LCBkb2N1bWVudEVsZW1lbnQ6IHt9IH07XHJcbiAgICBwcml2YXRlIGZha2VXaW5kb3c6IFdpbmRvdyA9IDxXaW5kb3c+eyBkb2N1bWVudDogdGhpcy5mYWtlRG9jdW1lbnQsIG5hdmlnYXRvcjoge30gfTtcclxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogT2JqZWN0KSB7fVxyXG4gICAgZ2V0TmF0aXZlV2luZG93KCk6IFdpbmRvdyB7XHJcbiAgICAgICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHJldHVybiB3aW5kb3c7XHJcbiAgICAgICAgZWxzZSByZXR1cm4gdGhpcy5mYWtlV2luZG93O1xyXG4gICAgfVxyXG5cclxuICAgIGdldE5hdGl2ZURvY3VtZW50KCkge1xyXG4gICAgICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSByZXR1cm4gZG9jdW1lbnQ7XHJcbiAgICAgICAgZWxzZSByZXR1cm4gdGhpcy5mYWtlRG9jdW1lbnQ7XHJcbiAgICB9XHJcbn0iXX0=