/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/joyride.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ViewContainerRef, TemplateRef, Output, EventEmitter, Inject, PLATFORM_ID } from '@angular/core';
import { JoyrideStep } from '../models/joyride-step.class';
import { JoyrideStepsContainerService } from '../services/joyride-steps-container.service';
import { JoyrideError } from '../models/joyride-error.class';
import { Router } from '@angular/router';
import { DomRefService } from '../services/dom.service';
import { isPlatformBrowser } from '@angular/common';
import { TemplatesService } from '../services/templates.service';
import { Observable } from 'rxjs';
/** @type {?} */
export var NO_POSITION = 'NO_POSITION';
var JoyrideDirective = /** @class */ (function () {
    function JoyrideDirective(joyrideStepsContainer, viewContainerRef, domService, router, templateService, platformId) {
        this.joyrideStepsContainer = joyrideStepsContainer;
        this.viewContainerRef = viewContainerRef;
        this.domService = domService;
        this.router = router;
        this.templateService = templateService;
        this.platformId = platformId;
        this.stepPosition = NO_POSITION;
        this.prev = new EventEmitter();
        this.next = new EventEmitter();
        this.done = new EventEmitter();
        this.subscriptions = [];
        this.windowRef = this.domService.getNativeWindow();
        this.step = new JoyrideStep();
    }
    /**
     * @return {?}
     */
    JoyrideDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (!isPlatformBrowser(this.platformId))
            return;
        if (this.prevTemplate)
            this.templateService.setPrevButton(this.prevTemplate);
        if (this.nextTemplate)
            this.templateService.setNextButton(this.nextTemplate);
        if (this.doneTemplate)
            this.templateService.setDoneButton(this.doneTemplate);
        if (this.counterTemplate)
            this.templateService.setCounter(this.counterTemplate);
        this.step.position = this.stepPosition;
        this.step.targetViewContainer = this.viewContainerRef;
        this.setAsyncFields(this.step);
        this.step.stepContent = this.stepContent;
        this.step.stepContentParams = this.stepContentParams;
        this.step.nextClicked = this.next;
        this.step.prevCliked = this.prev;
        this.step.tourDone = this.done;
        if (!this.name)
            throw new JoyrideError("All the steps should have the 'joyrideStep' property set with a custom name.");
        this.step.name = this.name;
        this.step.route = this.router.url.substr(0, 1) === '/' ? this.router.url.substr(1) : this.router.url;
        this.step.transformCssStyle = this.windowRef.getComputedStyle(this.viewContainerRef.element.nativeElement).transform;
        this.step.isElementOrAncestorFixed =
            this.isElementFixed(this.viewContainerRef.element) ||
                this.isAncestorsFixed(this.viewContainerRef.element.nativeElement.parentElement);
        this.joyrideStepsContainer.addStep(this.step);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    JoyrideDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['title'] || changes['text']) {
            this.setAsyncFields(this.step);
        }
    };
    /**
     * @private
     * @param {?} element
     * @return {?}
     */
    JoyrideDirective.prototype.isElementFixed = /**
     * @private
     * @param {?} element
     * @return {?}
     */
    function (element) {
        return this.windowRef.getComputedStyle(element.nativeElement).position === 'fixed';
    };
    /**
     * @private
     * @param {?} step
     * @return {?}
     */
    JoyrideDirective.prototype.setAsyncFields = /**
     * @private
     * @param {?} step
     * @return {?}
     */
    function (step) {
        if (this.title instanceof Observable) {
            this.subscriptions.push(this.title.subscribe((/**
             * @param {?} title
             * @return {?}
             */
            function (title) {
                step.title.next(title);
            })));
        }
        else {
            step.title.next(this.title);
        }
        if (this.text instanceof Observable) {
            this.subscriptions.push(this.text.subscribe((/**
             * @param {?} text
             * @return {?}
             */
            function (text) {
                step.text.next(text);
            })));
        }
        else {
            step.text.next(this.text);
        }
    };
    /**
     * @private
     * @param {?} nativeElement
     * @return {?}
     */
    JoyrideDirective.prototype.isAncestorsFixed = /**
     * @private
     * @param {?} nativeElement
     * @return {?}
     */
    function (nativeElement) {
        if (!nativeElement || !nativeElement.parentElement)
            return false;
        /** @type {?} */
        var isElementFixed = this.windowRef.getComputedStyle(nativeElement.parentElement).position === 'fixed';
        if (nativeElement.nodeName === 'BODY') {
            return isElementFixed;
        }
        if (isElementFixed)
            return true;
        else
            return this.isAncestorsFixed(nativeElement.parentElement);
    };
    /**
     * @return {?}
     */
    JoyrideDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} sub
         * @return {?}
         */
        function (sub) {
            sub.unsubscribe();
        }));
    };
    JoyrideDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'joyrideStep, [joyrideStep]'
                },] }
    ];
    /** @nocollapse */
    JoyrideDirective.ctorParameters = function () { return [
        { type: JoyrideStepsContainerService },
        { type: ViewContainerRef },
        { type: DomRefService },
        { type: Router },
        { type: TemplatesService },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    JoyrideDirective.propDecorators = {
        name: [{ type: Input, args: ['joyrideStep',] }],
        nextStep: [{ type: Input }],
        title: [{ type: Input }],
        text: [{ type: Input }],
        stepPosition: [{ type: Input }],
        stepContent: [{ type: Input }],
        stepContentParams: [{ type: Input }],
        prevTemplate: [{ type: Input }],
        nextTemplate: [{ type: Input }],
        doneTemplate: [{ type: Input }],
        counterTemplate: [{ type: Input }],
        prev: [{ type: Output }],
        next: [{ type: Output }],
        done: [{ type: Output }]
    };
    return JoyrideDirective;
}());
export { JoyrideDirective };
if (false) {
    /** @type {?} */
    JoyrideDirective.prototype.name;
    /** @type {?} */
    JoyrideDirective.prototype.nextStep;
    /** @type {?} */
    JoyrideDirective.prototype.title;
    /** @type {?} */
    JoyrideDirective.prototype.text;
    /** @type {?} */
    JoyrideDirective.prototype.stepPosition;
    /** @type {?} */
    JoyrideDirective.prototype.stepContent;
    /** @type {?} */
    JoyrideDirective.prototype.stepContentParams;
    /** @type {?} */
    JoyrideDirective.prototype.prevTemplate;
    /** @type {?} */
    JoyrideDirective.prototype.nextTemplate;
    /** @type {?} */
    JoyrideDirective.prototype.doneTemplate;
    /** @type {?} */
    JoyrideDirective.prototype.counterTemplate;
    /** @type {?} */
    JoyrideDirective.prototype.prev;
    /** @type {?} */
    JoyrideDirective.prototype.next;
    /** @type {?} */
    JoyrideDirective.prototype.done;
    /**
     * @type {?}
     * @private
     */
    JoyrideDirective.prototype.windowRef;
    /**
     * @type {?}
     * @private
     */
    JoyrideDirective.prototype.step;
    /**
     * @type {?}
     * @private
     */
    JoyrideDirective.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    JoyrideDirective.prototype.joyrideStepsContainer;
    /**
     * @type {?}
     * @private
     */
    JoyrideDirective.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    JoyrideDirective.prototype.domService;
    /**
     * @type {?}
     * @private
     */
    JoyrideDirective.prototype.router;
    /**
     * @type {?}
     * @private
     */
    JoyrideDirective.prototype.templateService;
    /**
     * @type {?}
     * @private
     */
    JoyrideDirective.prototype.platformId;
}
//# sourceMappingURL=data:application/json;base64,