/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/step/joyride-step.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewEncapsulation, ElementRef, ViewChild, Renderer2, Injector } from '@angular/core';
import { JoyrideStep } from '../../models/joyride-step.class';
import { JoyrideStepService, ARROW_SIZE, DISTANCE_FROM_TARGET } from '../../services';
import { JoyrideStepsContainerService } from '../../services/joyride-steps-container.service';
import { EventListenerService } from '../../services/event-listener.service';
import { DocumentService } from '../../services/document.service';
import { JoyrideOptionsService } from '../../services/joyride-options.service';
import { LoggerService } from '../../services/logger.service';
import { TemplatesService } from '../../services/templates.service';
/** @type {?} */
const STEP_MIN_WIDTH = 200;
/** @type {?} */
const STEP_MAX_WIDTH = 400;
/** @type {?} */
const CUSTOM_STEP_MAX_WIDTH_VW = 90;
/** @type {?} */
const STEP_HEIGHT = 200;
/** @type {?} */
const ASPECT_RATIO = 1.212;
/** @type {?} */
export const DEFAULT_DISTANCE_FROM_MARGIN_TOP = 2;
/** @type {?} */
export const DEFAULT_DISTANCE_FROM_MARGIN_LEFT = 2;
/** @type {?} */
const DEFAULT_DISTANCE_FROM_MARGIN_BOTTOM = 5;
/** @type {?} */
const DEFAULT_DISTANCE_FROM_MARGIN_RIGHT = 5;
export class JoyrideStepComponent {
    /**
     * @param {?} injector
     * @param {?} stepsContainerService
     * @param {?} eventListenerService
     * @param {?} documentService
     * @param {?} renderer
     * @param {?} logger
     * @param {?} optionsService
     * @param {?} templateService
     */
    constructor(injector, stepsContainerService, eventListenerService, documentService, renderer, logger, optionsService, templateService) {
        this.injector = injector;
        this.stepsContainerService = stepsContainerService;
        this.eventListenerService = eventListenerService;
        this.documentService = documentService;
        this.renderer = renderer;
        this.logger = logger;
        this.optionsService = optionsService;
        this.templateService = templateService;
        this.stepWidth = STEP_MIN_WIDTH;
        this.stepHeight = STEP_HEIGHT;
        this.showArrow = true;
        this.arrowSize = ARROW_SIZE;
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // Need to Inject here otherwise you will obtain a circular dependency
        this.joyrideStepService = this.injector.get(JoyrideStepService);
        this.documentHeight = this.documentService.getDocumentHeight();
        this.subscriptions.push(this.subscribeToResizeEvents());
        this.title = this.step.title.asObservable();
        this.text = this.step.text.asObservable();
        this.setCustomTemplates();
        this.setCustomTexts();
        this.counter = this.getCounter();
        this.isCounterVisible = this.optionsService.isCounterVisible();
        this.isPrevButtonVisible = this.optionsService.isPrevButtonVisible();
        this.themeColor = this.optionsService.getThemeColor();
        if (this.text)
            this.text.subscribe((/**
             * @param {?} val
             * @return {?}
             */
            val => this.checkRedraw(val)));
        if (this.title)
            this.title.subscribe((/**
             * @param {?} val
             * @return {?}
             */
            val => this.checkRedraw(val)));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.isCustomized()) {
            this.renderer.setStyle(this.stepContainer.nativeElement, 'max-width', CUSTOM_STEP_MAX_WIDTH_VW + 'vw');
            this.updateStepDimensions();
        }
        else {
            this.renderer.setStyle(this.stepContainer.nativeElement, 'max-width', STEP_MAX_WIDTH + 'px');
            /** @type {?} */
            let dimensions = this.getDimensionsByAspectRatio(this.stepContainer.nativeElement.clientWidth, this.stepContainer.nativeElement.clientHeight, ASPECT_RATIO);
            dimensions = this.adjustDimensions(dimensions.width, dimensions.height);
            this.stepWidth = dimensions.width;
            this.stepHeight = dimensions.height;
            this.renderer.setStyle(this.stepContainer.nativeElement, 'width', this.stepWidth + 'px');
            this.renderer.setStyle(this.stepContainer.nativeElement, 'height', this.stepHeight + 'px');
        }
        this.drawStep();
    }
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    checkRedraw(val) {
        if (val != null) {
            // Need to wait that the change is rendered before redrawing
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.redrawStep();
            }), 2);
        }
    }
    /**
     * @private
     * @return {?}
     */
    isCustomized() {
        return (this.step.stepContent ||
            this.templateService.getCounter() ||
            this.templateService.getPrevButton() ||
            this.templateService.getNextButton() ||
            this.templateService.getDoneButton());
    }
    /**
     * @private
     * @return {?}
     */
    setCustomTexts() {
        /** @type {?} */
        const customeTexts = this.optionsService.getCustomTexts();
        this.prevText = customeTexts.prev;
        this.nextText = customeTexts.next;
        this.doneText = customeTexts.done;
    }
    /**
     * @private
     * @return {?}
     */
    drawStep() {
        /** @type {?} */
        let position = this.step.isElementOrAncestorFixed
            ? 'fixed'
            : 'absolute';
        this.renderer.setStyle(this.stepHolder.nativeElement, 'position', position);
        this.renderer.setStyle(this.stepHolder.nativeElement, 'transform', this.step.transformCssStyle);
        this.targetWidth = this.step.targetViewContainer.element.nativeElement.getBoundingClientRect().width;
        this.targetHeight = this.step.targetViewContainer.element.nativeElement.getBoundingClientRect().height;
        this.targetAbsoluteLeft =
            position === 'fixed'
                ? this.documentService.getElementFixedLeft(this.step.targetViewContainer.element)
                : this.documentService.getElementAbsoluteLeft(this.step.targetViewContainer.element);
        this.targetAbsoluteTop =
            position === 'fixed'
                ? this.documentService.getElementFixedTop(this.step.targetViewContainer.element)
                : this.documentService.getElementAbsoluteTop(this.step.targetViewContainer.element);
        this.setStepStyle();
    }
    /**
     * @private
     * @return {?}
     */
    getCounter() {
        /** @type {?} */
        let stepPosition = this.stepsContainerService.getStepNumber(this.step.name);
        /** @type {?} */
        let numberOfSteps = this.stepsContainerService.getStepsCount();
        this.counterData = { step: stepPosition, total: numberOfSteps };
        return stepPosition + '/' + numberOfSteps;
    }
    /**
     * @private
     * @return {?}
     */
    setCustomTemplates() {
        this.customContent = this.step.stepContent;
        this.ctx = this.step.stepContentParams;
        this.customPrevButton = this.templateService.getPrevButton();
        this.customNextButton = this.templateService.getNextButton();
        this.customDoneButton = this.templateService.getDoneButton();
        this.customCounter = this.templateService.getCounter();
    }
    /**
     * @return {?}
     */
    prev() {
        this.joyrideStepService.prev();
    }
    /**
     * @return {?}
     */
    next() {
        this.joyrideStepService.next();
    }
    /**
     * @return {?}
     */
    close() {
        this.joyrideStepService.close();
    }
    /**
     * @return {?}
     */
    isFirstStep() {
        return this.stepsContainerService.getStepNumber(this.step.name) === 1;
    }
    /**
     * @return {?}
     */
    isLastStep() {
        return (this.stepsContainerService.getStepNumber(this.step.name) ===
            this.stepsContainerService.getStepsCount());
    }
    /**
     * @private
     * @return {?}
     */
    setStepStyle() {
        switch (this.step.position) {
            case 'top': {
                this.setStyleTop();
                break;
            }
            case 'bottom': {
                this.setStyleBottom();
                break;
            }
            case 'right': {
                this.setStyleRight();
                break;
            }
            case 'left': {
                this.setStyleLeft();
                break;
            }
            case 'center': {
                this.setStyleCenter();
                break;
            }
            default: {
                this.setStyleBottom();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    setStyleTop() {
        this.stepsContainerService.updatePosition(this.step.name, 'top');
        this.topPosition =
            this.targetAbsoluteTop - DISTANCE_FROM_TARGET - this.stepHeight;
        this.stepAbsoluteTop =
            this.targetAbsoluteTop - DISTANCE_FROM_TARGET - this.stepHeight;
        this.arrowTopPosition = this.stepHeight;
        this.leftPosition =
            this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;
        this.stepAbsoluteLeft =
            this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;
        this.arrowLeftPosition = this.stepWidth / 2 - this.arrowSize;
        this.adjustLeftPosition();
        this.adjustRightPosition();
        this.arrowPosition = 'bottom';
        this.autofixTopPosition();
    }
    /**
     * @private
     * @return {?}
     */
    setStyleRight() {
        this.stepsContainerService.updatePosition(this.step.name, 'right');
        this.topPosition =
            this.targetAbsoluteTop +
                this.targetHeight / 2 -
                this.stepHeight / 2;
        this.stepAbsoluteTop =
            this.targetAbsoluteTop +
                this.targetHeight / 2 -
                this.stepHeight / 2;
        this.arrowTopPosition = this.stepHeight / 2 - this.arrowSize;
        this.leftPosition =
            this.targetAbsoluteLeft + this.targetWidth + DISTANCE_FROM_TARGET;
        this.stepAbsoluteLeft =
            this.targetAbsoluteLeft + this.targetWidth + DISTANCE_FROM_TARGET;
        this.arrowLeftPosition = -this.arrowSize;
        this.adjustTopPosition();
        this.adjustBottomPosition();
        this.arrowPosition = 'left';
        this.autofixRightPosition();
    }
    /**
     * @private
     * @return {?}
     */
    setStyleBottom() {
        this.stepsContainerService.updatePosition(this.step.name, 'bottom');
        this.topPosition =
            this.targetAbsoluteTop + this.targetHeight + DISTANCE_FROM_TARGET;
        this.stepAbsoluteTop =
            this.targetAbsoluteTop + this.targetHeight + DISTANCE_FROM_TARGET;
        this.arrowTopPosition = -this.arrowSize;
        this.arrowLeftPosition = this.stepWidth / 2 - this.arrowSize;
        this.leftPosition =
            this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;
        this.stepAbsoluteLeft =
            this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;
        this.adjustLeftPosition();
        this.adjustRightPosition();
        this.arrowPosition = 'top';
        this.autofixBottomPosition();
    }
    /**
     * @private
     * @return {?}
     */
    setStyleLeft() {
        this.stepsContainerService.updatePosition(this.step.name, 'left');
        this.topPosition =
            this.targetAbsoluteTop +
                this.targetHeight / 2 -
                this.stepHeight / 2;
        this.stepAbsoluteTop =
            this.targetAbsoluteTop +
                this.targetHeight / 2 -
                this.stepHeight / 2;
        this.arrowTopPosition = this.stepHeight / 2 - this.arrowSize;
        this.leftPosition =
            this.targetAbsoluteLeft - this.stepWidth - DISTANCE_FROM_TARGET;
        this.stepAbsoluteLeft =
            this.targetAbsoluteLeft - this.stepWidth - DISTANCE_FROM_TARGET;
        this.arrowLeftPosition = this.stepWidth;
        this.adjustTopPosition();
        this.adjustBottomPosition();
        this.arrowPosition = 'right';
        this.autofixLeftPosition();
    }
    /**
     * @private
     * @return {?}
     */
    setStyleCenter() {
        this.renderer.setStyle(this.stepHolder.nativeElement, 'position', 'fixed');
        this.renderer.setStyle(this.stepHolder.nativeElement, 'top', '50%');
        this.renderer.setStyle(this.stepHolder.nativeElement, 'left', '50%');
        this.updateStepDimensions();
        this.renderer.setStyle(this.stepHolder.nativeElement, 'transform', `translate(-${this.stepWidth / 2}px, -${this.stepHeight / 2}px)`);
        this.showArrow = false;
    }
    /**
     * @private
     * @return {?}
     */
    adjustLeftPosition() {
        if (this.leftPosition < 0) {
            this.arrowLeftPosition =
                this.arrowLeftPosition +
                    this.leftPosition -
                    DEFAULT_DISTANCE_FROM_MARGIN_LEFT;
            this.leftPosition = DEFAULT_DISTANCE_FROM_MARGIN_LEFT;
        }
    }
    /**
     * @private
     * @return {?}
     */
    adjustRightPosition() {
        /** @type {?} */
        let currentWindowWidth = document.body.clientWidth;
        if (this.stepAbsoluteLeft + this.stepWidth > currentWindowWidth) {
            /** @type {?} */
            let newLeftPos = this.leftPosition -
                (this.stepAbsoluteLeft +
                    this.stepWidth +
                    DEFAULT_DISTANCE_FROM_MARGIN_RIGHT -
                    currentWindowWidth);
            /** @type {?} */
            let deltaLeftPosition = newLeftPos - this.leftPosition;
            this.leftPosition = newLeftPos;
            this.arrowLeftPosition = this.arrowLeftPosition - deltaLeftPosition;
        }
    }
    /**
     * @private
     * @return {?}
     */
    adjustTopPosition() {
        if (this.stepAbsoluteTop < 0) {
            this.arrowTopPosition =
                this.arrowTopPosition +
                    this.topPosition -
                    DEFAULT_DISTANCE_FROM_MARGIN_TOP;
            this.topPosition = DEFAULT_DISTANCE_FROM_MARGIN_TOP;
        }
    }
    /**
     * @private
     * @return {?}
     */
    adjustBottomPosition() {
        if (this.stepAbsoluteTop + this.stepHeight > this.documentHeight) {
            /** @type {?} */
            let newTopPos = this.topPosition -
                (this.stepAbsoluteTop +
                    this.stepHeight +
                    DEFAULT_DISTANCE_FROM_MARGIN_BOTTOM -
                    this.documentHeight);
            /** @type {?} */
            let deltaTopPosition = newTopPos - this.topPosition;
            this.topPosition = newTopPos;
            this.arrowTopPosition = this.arrowTopPosition - deltaTopPosition;
        }
    }
    /**
     * @private
     * @return {?}
     */
    autofixTopPosition() {
        if (this.positionAlreadyFixed) {
            this.logger.warn('No step positions found for this step. The step will be centered.');
        }
        else if (this.targetAbsoluteTop - this.stepHeight - this.arrowSize <
            0) {
            this.positionAlreadyFixed = true;
            this.setStyleRight();
        }
    }
    /**
     * @private
     * @return {?}
     */
    autofixRightPosition() {
        if (this.targetAbsoluteLeft +
            this.targetWidth +
            this.stepWidth +
            this.arrowSize >
            document.body.clientWidth) {
            this.setStyleBottom();
        }
    }
    /**
     * @private
     * @return {?}
     */
    autofixBottomPosition() {
        if (this.targetAbsoluteTop +
            this.stepHeight +
            this.arrowSize +
            this.targetHeight >
            this.documentHeight) {
            this.setStyleLeft();
        }
    }
    /**
     * @private
     * @return {?}
     */
    autofixLeftPosition() {
        if (this.targetAbsoluteLeft - this.stepWidth - this.arrowSize < 0) {
            this.setStyleTop();
        }
    }
    /**
     * @private
     * @return {?}
     */
    subscribeToResizeEvents() {
        return this.eventListenerService.resizeEvent.subscribe((/**
         * @return {?}
         */
        () => {
            this.redrawStep();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    redrawStep() {
        this.updateStepDimensions();
        this.drawStep();
    }
    /**
     * @private
     * @param {?} width
     * @param {?} height
     * @param {?} aspectRatio
     * @return {?}
     */
    getDimensionsByAspectRatio(width, height, aspectRatio) {
        /** @type {?} */
        let calcHeight = (width + height) / (1 + aspectRatio);
        /** @type {?} */
        let calcWidth = calcHeight * aspectRatio;
        return {
            width: calcWidth,
            height: calcHeight
        };
    }
    /**
     * @private
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    adjustDimensions(width, height) {
        /** @type {?} */
        let area = width * height;
        /** @type {?} */
        let newWidth = width;
        /** @type {?} */
        let newHeight = height;
        if (width > STEP_MAX_WIDTH) {
            newWidth = STEP_MAX_WIDTH;
            newHeight = area / newWidth;
        }
        else if (width < STEP_MIN_WIDTH) {
            newWidth = STEP_MIN_WIDTH;
            newHeight = STEP_MIN_WIDTH / ASPECT_RATIO;
        }
        return {
            width: newWidth,
            height: newHeight
        };
    }
    /**
     * @private
     * @return {?}
     */
    updateStepDimensions() {
        this.stepWidth = this.stepContainer.nativeElement.clientWidth;
        this.stepHeight = this.stepContainer.nativeElement.clientHeight;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        subscription => {
            subscription.unsubscribe();
        }));
    }
}
JoyrideStepComponent.decorators = [
    { type: Component, args: [{
                selector: 'joyride-step',
                template: "<div #stepHolder class=\"joyride-step__holder\" [id]=\"'joyride-step-' + step.name\" [style.top.px]=\"topPosition\" [style.left.px]=\"leftPosition\">\r\n    <joyride-arrow *ngIf=\"showArrow\" class=\"joyride-step__arrow\" [position]=\"arrowPosition\" [style.top.px]=\"arrowTopPosition\"\r\n        [style.left.px]=\"arrowLeftPosition\"></joyride-arrow>\r\n    <div #stepContainer class=\"joyride-step__container\">\r\n        <joy-close-button class=\"joyride-step__close\" (click)=\"close()\"></joy-close-button>\r\n        <div class=\"joyride-step__header\">\r\n            <div class=\"joyride-step__title\" [style.color]=\"themeColor\">{{ title | async }}</div>\r\n        </div>\r\n        <div class=\"joyride-step__body\">\r\n            <ng-container *ngTemplateOutlet=\"customContent ? customContent : defaultContent; context: ctx\"></ng-container>\r\n            <ng-template #defaultContent>\r\n                {{ text | async }}\r\n            </ng-template>\r\n        </div>\r\n        <div class=\"joyride-step__footer\">\r\n            <div *ngIf=\"isCounterVisible\" class=\"joyride-step__counter-container\">\r\n                <ng-container *ngTemplateOutlet=\"customCounter ? customCounter : defaultCounter; context: counterData\"></ng-container>\r\n                <ng-template #defaultCounter>\r\n                    <div class=\"joyride-step__counter\">{{ counter }}</div>\r\n                </ng-template>\r\n            </div>\r\n            <div class=\"joyride-step__buttons-container\">\r\n                <div class=\"joyride-step__prev-container joyride-step__button\" *ngIf=\"isPrevButtonVisible && !isFirstStep()\" (click)=\"prev()\">\r\n                    <ng-container *ngTemplateOutlet=\"customPrevButton ? customPrevButton : defaultPrevButton\"></ng-container>\r\n                    <ng-template #defaultPrevButton>\r\n                        <joyride-button class=\"joyride-step__prev-button\" [color]=\"themeColor\">{{ prevText | async }}</joyride-button>\r\n                    </ng-template>\r\n                </div>\r\n                <div class=\"joyride-step__next-container joyride-step__button\" *ngIf=\"!isLastStep(); else doneButton\" (click)=\"next()\">\r\n                    <ng-container *ngTemplateOutlet=\"customNextButton ? customNextButton : defaulNextButton\"></ng-container>\r\n                    <ng-template #defaulNextButton>\r\n                        <joyride-button [color]=\"themeColor\">{{ nextText | async }}</joyride-button>\r\n                    </ng-template>\r\n                </div>\r\n                <ng-template #doneButton>\r\n                    <div class=\"joyride-step__done-container joyride-step__button\" (click)=\"close()\">\r\n                        <ng-container *ngTemplateOutlet=\"customDoneButton ? customDoneButton : defaultDoneButton\"></ng-container>\r\n                        <ng-template #defaultDoneButton>\r\n                            <joyride-button class=\"joyride-step__done-button\" [color]=\"themeColor\">{{ doneText | async }}</joyride-button>\r\n                        </ng-template>\r\n                    </div>\r\n                </ng-template>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>",
                encapsulation: ViewEncapsulation.None,
                styles: [".joyride-step__holder{position:absolute;font-family:Arial,Helvetica,sans-serif;font-size:16px;z-index:1001}.joyride-step__arrow{position:absolute;left:40px;z-index:1002}.joyride-step__container{box-sizing:border-box;position:relative;color:#000;background-color:#fff;display:flex;flex-direction:column;justify-content:space-between;padding:10px;box-shadow:0 0 30px 1px #000}.joyride-step__header{display:flex;align-items:center;padding:8px}.joyride-step__title{font-weight:700;font-size:20px}.joyride-step__close{position:absolute;right:10px;top:10px;width:14px;height:14px;cursor:pointer}.joyride-step__body{text-align:left;padding:10px 8px}.joyride-step__footer{display:flex;flex-direction:row;justify-content:space-between;align-items:center;padding-left:8px}.joyride-step__buttons-container{display:flex;flex-direction:row}.joyride-step__button:first-child{margin-right:2.5px}.joyride-step__button:last-child{margin-left:2.5px}.joyride-step__counter{font-weight:700;font-size:14px}.joyride-step__counter-container{margin-right:10px}"]
            }] }
];
/** @nocollapse */
JoyrideStepComponent.ctorParameters = () => [
    { type: Injector },
    { type: JoyrideStepsContainerService },
    { type: EventListenerService },
    { type: DocumentService },
    { type: Renderer2 },
    { type: LoggerService },
    { type: JoyrideOptionsService },
    { type: TemplatesService }
];
JoyrideStepComponent.propDecorators = {
    step: [{ type: Input }],
    stepHolder: [{ type: ViewChild, args: ['stepHolder', { static: true },] }],
    stepContainer: [{ type: ViewChild, args: ['stepContainer', { static: true },] }]
};
if (false) {
    /** @type {?} */
    JoyrideStepComponent.prototype.stepWidth;
    /** @type {?} */
    JoyrideStepComponent.prototype.stepHeight;
    /** @type {?} */
    JoyrideStepComponent.prototype.leftPosition;
    /** @type {?} */
    JoyrideStepComponent.prototype.topPosition;
    /** @type {?} */
    JoyrideStepComponent.prototype.showArrow;
    /** @type {?} */
    JoyrideStepComponent.prototype.arrowPosition;
    /** @type {?} */
    JoyrideStepComponent.prototype.arrowLeftPosition;
    /** @type {?} */
    JoyrideStepComponent.prototype.arrowTopPosition;
    /** @type {?} */
    JoyrideStepComponent.prototype.title;
    /** @type {?} */
    JoyrideStepComponent.prototype.text;
    /** @type {?} */
    JoyrideStepComponent.prototype.counter;
    /** @type {?} */
    JoyrideStepComponent.prototype.isCounterVisible;
    /** @type {?} */
    JoyrideStepComponent.prototype.isPrevButtonVisible;
    /** @type {?} */
    JoyrideStepComponent.prototype.themeColor;
    /** @type {?} */
    JoyrideStepComponent.prototype.customContent;
    /** @type {?} */
    JoyrideStepComponent.prototype.customPrevButton;
    /** @type {?} */
    JoyrideStepComponent.prototype.customNextButton;
    /** @type {?} */
    JoyrideStepComponent.prototype.customDoneButton;
    /** @type {?} */
    JoyrideStepComponent.prototype.customCounter;
    /** @type {?} */
    JoyrideStepComponent.prototype.counterData;
    /** @type {?} */
    JoyrideStepComponent.prototype.ctx;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepComponent.prototype.arrowSize;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepComponent.prototype.stepAbsoluteLeft;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepComponent.prototype.stepAbsoluteTop;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepComponent.prototype.targetWidth;
    /** @type {?} */
    JoyrideStepComponent.prototype.targetHeight;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepComponent.prototype.targetAbsoluteLeft;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepComponent.prototype.targetAbsoluteTop;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepComponent.prototype.subscriptions;
    /** @type {?} */
    JoyrideStepComponent.prototype.joyrideStepService;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepComponent.prototype.positionAlreadyFixed;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepComponent.prototype.documentHeight;
    /** @type {?} */
    JoyrideStepComponent.prototype.prevText;
    /** @type {?} */
    JoyrideStepComponent.prototype.nextText;
    /** @type {?} */
    JoyrideStepComponent.prototype.doneText;
    /** @type {?} */
    JoyrideStepComponent.prototype.step;
    /** @type {?} */
    JoyrideStepComponent.prototype.stepHolder;
    /** @type {?} */
    JoyrideStepComponent.prototype.stepContainer;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepComponent.prototype.stepsContainerService;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepComponent.prototype.eventListenerService;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepComponent.prototype.documentService;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepComponent.prototype.logger;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepComponent.prototype.optionsService;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepComponent.prototype.templateService;
}
//# sourceMappingURL=data:application/json;base64,