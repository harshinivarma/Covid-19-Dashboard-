/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/joyride-steps-container.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { JoyrideOptionsService } from './joyride-options.service';
import { LoggerService } from './logger.service';
import { JoyrideError, JoyrideStepOutOfRange } from '../models/joyride-error.class';
/** @type {?} */
const ROUTE_SEPARATOR = '@';
class Step {
}
if (false) {
    /** @type {?} */
    Step.prototype.id;
    /** @type {?} */
    Step.prototype.step;
}
/** @enum {string} */
const StepActionType = {
    NEXT: "NEXT",
    PREV: "PREV",
};
export { StepActionType };
export class JoyrideStepsContainerService {
    /**
     * @param {?} stepOptions
     * @param {?} logger
     */
    constructor(stepOptions, logger) {
        this.stepOptions = stepOptions;
        this.logger = logger;
        this.tempSteps = [];
        this.currentStepIndex = -2;
        this.stepHasBeenModified = new Subject();
    }
    /**
     * @private
     * @return {?}
     */
    getFirstStepIndex() {
        /** @type {?} */
        const firstStep = this.stepOptions.getFirstStep();
        /** @type {?} */
        const stepIds = this.stepOptions.getStepsOrder();
        /** @type {?} */
        let index = stepIds.indexOf(firstStep);
        if (index < 0) {
            index = 0;
            if (firstStep !== undefined)
                this.logger.warn(`The step ${firstStep} does not exist. Check in your step list if it's present.`);
        }
        return index;
    }
    /**
     * @return {?}
     */
    init() {
        this.logger.info('Initializing the steps array.');
        this.steps = [];
        this.currentStepIndex = this.getFirstStepIndex() - 1;
        /** @type {?} */
        let stepIds = this.stepOptions.getStepsOrder();
        stepIds.forEach((/**
         * @param {?} stepId
         * @return {?}
         */
        stepId => this.steps.push({ id: stepId, step: null })));
    }
    /**
     * @param {?} stepToAdd
     * @return {?}
     */
    addStep(stepToAdd) {
        /** @type {?} */
        let stepExist = this.tempSteps.filter((/**
         * @param {?} step
         * @return {?}
         */
        step => step.name === stepToAdd.name)).length > 0;
        if (!stepExist) {
            this.logger.info(`Adding step ${stepToAdd.name} to the steps list.`);
            this.tempSteps.push(stepToAdd);
        }
        else {
            /** @type {?} */
            let stepIndexToReplace = this.tempSteps.findIndex((/**
             * @param {?} step
             * @return {?}
             */
            step => step.name === stepToAdd.name));
            this.tempSteps[stepIndexToReplace] = stepToAdd;
        }
    }
    /**
     * @param {?} action
     * @return {?}
     */
    get(action) {
        if (action === StepActionType.NEXT)
            this.currentStepIndex++;
        else
            this.currentStepIndex--;
        if (this.currentStepIndex < 0 || this.currentStepIndex >= this.steps.length)
            throw new JoyrideStepOutOfRange('The first or last step of the tour cannot be found!');
        /** @type {?} */
        const stepName = this.getStepName(this.steps[this.currentStepIndex].id);
        /** @type {?} */
        const index = this.tempSteps.findIndex((/**
         * @param {?} step
         * @return {?}
         */
        step => step.name === stepName));
        /** @type {?} */
        let stepFound = this.tempSteps[index];
        this.steps[this.currentStepIndex].step = stepFound;
        if (stepFound == null) {
            this.logger.warn(`Step ${this.steps[this.currentStepIndex].id} not found in the DOM. Check if it's hidden by *ngIf directive.`);
        }
        return stepFound;
    }
    /**
     * @param {?} action
     * @return {?}
     */
    getStepRoute(action) {
        /** @type {?} */
        let stepID;
        if (action === StepActionType.NEXT) {
            stepID = this.steps[this.currentStepIndex + 1] ? this.steps[this.currentStepIndex + 1].id : null;
        }
        else {
            stepID = this.steps[this.currentStepIndex - 1] ? this.steps[this.currentStepIndex - 1].id : null;
        }
        /** @type {?} */
        let stepRoute = stepID && stepID.includes(ROUTE_SEPARATOR) ? stepID.split(ROUTE_SEPARATOR)[1] : '';
        return stepRoute;
    }
    /**
     * @param {?} stepName
     * @param {?} position
     * @return {?}
     */
    updatePosition(stepName, position) {
        /** @type {?} */
        let index = this.getStepIndex(stepName);
        if (this.steps[index].step) {
            this.steps[index].step.position = position;
            this.stepHasBeenModified.next(this.steps[index].step);
        }
        else {
            this.logger.warn(`Trying to modify the position of ${stepName} to ${position}. Step not found!Is this step located in a different route?`);
        }
    }
    /**
     * @param {?} stepName
     * @return {?}
     */
    getStepNumber(stepName) {
        return this.getStepIndex(stepName) + 1;
    }
    /**
     * @return {?}
     */
    getStepsCount() {
        /** @type {?} */
        let stepsOrder = this.stepOptions.getStepsOrder();
        return stepsOrder.length;
    }
    /**
     * @private
     * @param {?} stepName
     * @return {?}
     */
    getStepIndex(stepName) {
        /** @type {?} */
        const index = this.steps
            .map((/**
         * @param {?} step
         * @return {?}
         */
        step => (step.id.includes(ROUTE_SEPARATOR) ? step.id.split(ROUTE_SEPARATOR)[0] : step.id)))
            .findIndex((/**
         * @param {?} name
         * @return {?}
         */
        name => stepName === name));
        if (index === -1)
            throw new JoyrideError(`The step with name: ${stepName} does not exist in the step list.`);
        return index;
    }
    /**
     * @private
     * @param {?} stepID
     * @return {?}
     */
    getStepName(stepID) {
        /** @type {?} */
        let stepName = stepID && stepID.includes(ROUTE_SEPARATOR) ? stepID.split(ROUTE_SEPARATOR)[0] : stepID;
        return stepName;
    }
}
JoyrideStepsContainerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
JoyrideStepsContainerService.ctorParameters = () => [
    { type: JoyrideOptionsService },
    { type: LoggerService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    JoyrideStepsContainerService.prototype.steps;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepsContainerService.prototype.tempSteps;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepsContainerService.prototype.currentStepIndex;
    /** @type {?} */
    JoyrideStepsContainerService.prototype.stepHasBeenModified;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepsContainerService.prototype.stepOptions;
    /**
     * @type {?}
     * @private
     */
    JoyrideStepsContainerService.prototype.logger;
}
//# sourceMappingURL=data:application/json;base64,