/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/joyride.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { JoyrideStepService } from './joyride-step.service';
import { JoyrideOptionsService } from './joyride-options.service';
import { of } from 'rxjs';
import { finalize } from 'rxjs/operators';
import { JoyrideStepInfo } from '../models/joyride-step-info.class';
import { isPlatformBrowser } from '@angular/common';
export class JoyrideService {
    /**
     * @param {?} platformId
     * @param {?} stepService
     * @param {?} optionsService
     */
    constructor(platformId, stepService, optionsService) {
        this.platformId = platformId;
        this.stepService = stepService;
        this.optionsService = optionsService;
        this.tourInProgress = false;
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    startTour(options) {
        if (!isPlatformBrowser(this.platformId)) {
            return of(new JoyrideStepInfo());
        }
        if (!this.tourInProgress) {
            this.tourInProgress = true;
            if (options) {
                this.optionsService.setOptions(options);
            }
            this.tour$ = this.stepService.startTour().pipe(finalize((/**
             * @return {?}
             */
            () => (this.tourInProgress = false))));
            this.tour$.subscribe();
        }
        return this.tour$;
    }
    /**
     * @return {?}
     */
    closeTour() {
        if (this.isTourInProgress())
            this.stepService.close();
    }
    /**
     * @return {?}
     */
    isTourInProgress() {
        return this.tourInProgress;
    }
}
JoyrideService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
JoyrideService.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: JoyrideStepService },
    { type: JoyrideOptionsService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    JoyrideService.prototype.tourInProgress;
    /**
     * @type {?}
     * @private
     */
    JoyrideService.prototype.tour$;
    /**
     * @type {?}
     * @private
     */
    JoyrideService.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    JoyrideService.prototype.stepService;
    /**
     * @type {?}
     * @private
     */
    JoyrideService.prototype.optionsService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam95cmlkZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWpveXJpZGUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvam95cmlkZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWxFLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUdwRCxNQUFNLE9BQU8sY0FBYzs7Ozs7O0lBSXZCLFlBQ2lDLFVBQWtCLEVBQzlCLFdBQStCLEVBQy9CLGNBQXFDO1FBRnpCLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDOUIsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO1FBQy9CLG1CQUFjLEdBQWQsY0FBYyxDQUF1QjtRQU5sRCxtQkFBYyxHQUFZLEtBQUssQ0FBQztJQU9yQyxDQUFDOzs7OztJQUVKLFNBQVMsQ0FBQyxPQUF3QjtRQUM5QixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3JDLE9BQU8sRUFBRSxDQUFDLElBQUksZUFBZSxFQUFFLENBQUMsQ0FBQztTQUNwQztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1lBQzNCLElBQUksT0FBTyxFQUFFO2dCQUNULElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzNDO1lBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFROzs7WUFBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1lBQzlGLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDMUI7UUFDRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQzs7OztJQUVELFNBQVM7UUFDTCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDMUQsQ0FBQzs7OztJQUVELGdCQUFnQjtRQUNaLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUMvQixDQUFDOzs7WUFoQ0osVUFBVTs7OztZQU1zQyxNQUFNLHVCQUE5QyxNQUFNLFNBQUMsV0FBVztZQWRsQixrQkFBa0I7WUFDbEIscUJBQXFCOzs7Ozs7O0lBUzFCLHdDQUF3Qzs7Ozs7SUFDeEMsK0JBQTJDOzs7OztJQUd2QyxvQ0FBK0M7Ozs7O0lBQy9DLHFDQUFnRDs7Ozs7SUFDaEQsd0NBQXNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0LCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBKb3lyaWRlU3RlcFNlcnZpY2UgfSBmcm9tICcuL2pveXJpZGUtc3RlcC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSm95cmlkZU9wdGlvbnNTZXJ2aWNlIH0gZnJvbSAnLi9qb3lyaWRlLW9wdGlvbnMuc2VydmljZSc7XHJcbmltcG9ydCB7IEpveXJpZGVPcHRpb25zIH0gZnJvbSAnLi4vbW9kZWxzL2pveXJpZGUtb3B0aW9ucy5jbGFzcyc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBKb3lyaWRlU3RlcEluZm8gfSBmcm9tICcuLi9tb2RlbHMvam95cmlkZS1zdGVwLWluZm8uY2xhc3MnO1xyXG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBKb3lyaWRlU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHRvdXJJblByb2dyZXNzOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIHRvdXIkOiBPYnNlcnZhYmxlPEpveXJpZGVTdGVwSW5mbz47XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBPYmplY3QsXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBzdGVwU2VydmljZTogSm95cmlkZVN0ZXBTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9uc1NlcnZpY2U6IEpveXJpZGVPcHRpb25zU2VydmljZVxyXG4gICAgKSB7fVxyXG5cclxuICAgIHN0YXJ0VG91cihvcHRpb25zPzogSm95cmlkZU9wdGlvbnMpOiBPYnNlcnZhYmxlPEpveXJpZGVTdGVwSW5mbz4ge1xyXG4gICAgICAgIGlmICghaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2YobmV3IEpveXJpZGVTdGVwSW5mbygpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLnRvdXJJblByb2dyZXNzKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG91ckluUHJvZ3Jlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zU2VydmljZS5zZXRPcHRpb25zKG9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudG91ciQgPSB0aGlzLnN0ZXBTZXJ2aWNlLnN0YXJ0VG91cigpLnBpcGUoZmluYWxpemUoKCkgPT4gKHRoaXMudG91ckluUHJvZ3Jlc3MgPSBmYWxzZSkpKTtcclxuICAgICAgICAgICAgdGhpcy50b3VyJC5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG91ciQ7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2VUb3VyKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmlzVG91ckluUHJvZ3Jlc3MoKSkgdGhpcy5zdGVwU2VydmljZS5jbG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzVG91ckluUHJvZ3Jlc3MoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG91ckluUHJvZ3Jlc3M7XHJcbiAgICB9XHJcbn1cclxuIl19