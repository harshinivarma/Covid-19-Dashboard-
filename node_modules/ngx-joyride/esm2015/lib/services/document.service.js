/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/document.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { DomRefService } from './dom.service';
/**
 * @record
 */
export function IDocumentService() { }
if (false) {
    /**
     * @param {?} elementRef
     * @return {?}
     */
    IDocumentService.prototype.getElementFixedTop = function (elementRef) { };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    IDocumentService.prototype.getElementFixedLeft = function (elementRef) { };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    IDocumentService.prototype.getElementAbsoluteTop = function (elementRef) { };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    IDocumentService.prototype.getElementAbsoluteLeft = function (elementRef) { };
    /**
     * @return {?}
     */
    IDocumentService.prototype.setDocumentHeight = function () { };
    /**
     * @return {?}
     */
    IDocumentService.prototype.getDocumentHeight = function () { };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    IDocumentService.prototype.isParentScrollable = function (elementRef) { };
    /**
     * @param {?} elementRef
     * @param {?} isElementFixed
     * @param {?} keywordToDiscard
     * @return {?}
     */
    IDocumentService.prototype.isElementBeyondOthers = function (elementRef, isElementFixed, keywordToDiscard) { };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    IDocumentService.prototype.scrollToTheTop = function (elementRef) { };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    IDocumentService.prototype.scrollToTheBottom = function (elementRef) { };
}
export class DocumentService {
    /**
     * @param {?} DOMService
     */
    constructor(DOMService) {
        this.DOMService = DOMService;
        this.setDocumentHeight();
        if (!document.elementsFromPoint) {
            // IE 11 - Edge browsers
            document.elementsFromPoint = this.elementsFromPoint.bind(this);
        }
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getElementFixedTop(elementRef) {
        return elementRef.nativeElement.getBoundingClientRect().top;
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getElementFixedLeft(elementRef) {
        return elementRef.nativeElement.getBoundingClientRect().left;
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getElementAbsoluteTop(elementRef) {
        /** @type {?} */
        const scrollOffsets = this.getScrollOffsets();
        return (elementRef.nativeElement.getBoundingClientRect().top +
            scrollOffsets.y);
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getElementAbsoluteLeft(elementRef) {
        /** @type {?} */
        const scrollOffsets = this.getScrollOffsets();
        return (elementRef.nativeElement.getBoundingClientRect().left +
            scrollOffsets.x);
    }
    /**
     * @return {?}
     */
    setDocumentHeight() {
        this.documentHeight = this.calculateDocumentHeight();
    }
    /**
     * @return {?}
     */
    getDocumentHeight() {
        return this.documentHeight;
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    isParentScrollable(elementRef) {
        return (this.getFirstScrollableParent(elementRef.nativeElement) !==
            this.DOMService.getNativeDocument().body);
    }
    /**
     * @param {?} elementRef
     * @param {?} isElementFixed
     * @param {?} keywordToDiscard
     * @return {?}
     */
    isElementBeyondOthers(elementRef, isElementFixed, keywordToDiscard) {
        /** @type {?} */
        const x1 = isElementFixed
            ? this.getElementFixedLeft(elementRef)
            : this.getElementAbsoluteLeft(elementRef);
        /** @type {?} */
        const y1 = isElementFixed
            ? this.getElementFixedTop(elementRef)
            : this.getElementAbsoluteTop(elementRef);
        /** @type {?} */
        const x2 = x1 + elementRef.nativeElement.getBoundingClientRect().width - 1;
        /** @type {?} */
        const y2 = y1 + elementRef.nativeElement.getBoundingClientRect().height - 1;
        /** @type {?} */
        const elements1 = this.DOMService.getNativeDocument().elementsFromPoint(x1, y1);
        /** @type {?} */
        const elements2 = this.DOMService.getNativeDocument().elementsFromPoint(x2, y2);
        if (elements1.length === 0 && elements2.length === 0)
            return 1;
        if (this.getFirstElementWithoutKeyword(elements1, keywordToDiscard) !==
            elementRef.nativeElement ||
            this.getFirstElementWithoutKeyword(elements2, keywordToDiscard) !==
                elementRef.nativeElement) {
            return 2;
        }
        return 3;
    }
    /**
     * @param {?} elementRef
     * @param {?} isElementFixed
     * @return {?}
     */
    scrollIntoView(elementRef, isElementFixed) {
        /** @type {?} */
        const firstScrollableParent = this.getFirstScrollableParent(elementRef.nativeElement);
        /** @type {?} */
        const top = isElementFixed
            ? this.getElementFixedTop(elementRef)
            : this.getElementAbsoluteTop(elementRef);
        if (firstScrollableParent !== this.DOMService.getNativeDocument().body) {
            if (firstScrollableParent.scrollTo) {
                firstScrollableParent.scrollTo(0, top - 150);
            }
            else {
                // IE 11 - Edge browsers
                firstScrollableParent.scrollTop = top - 150;
            }
        }
        else {
            this.DOMService.getNativeWindow().scrollTo(0, top - 150);
        }
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    scrollToTheTop(elementRef) {
        /** @type {?} */
        const firstScrollableParent = this.getFirstScrollableParent(elementRef.nativeElement);
        if (firstScrollableParent !== this.DOMService.getNativeDocument().body) {
            if (firstScrollableParent.scrollTo) {
                firstScrollableParent.scrollTo(0, 0);
            }
            else {
                // IE 11 - Edge browsers
                firstScrollableParent.scrollTop = 0;
            }
        }
        else {
            this.DOMService.getNativeWindow().scrollTo(0, 0);
        }
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    scrollToTheBottom(elementRef) {
        /** @type {?} */
        const firstScrollableParent = this.getFirstScrollableParent(elementRef.nativeElement);
        if (firstScrollableParent !== this.DOMService.getNativeDocument().body) {
            if (firstScrollableParent.scrollTo) {
                firstScrollableParent.scrollTo(0, this.DOMService.getNativeDocument().body.scrollHeight);
            }
            else {
                // IE 11 - Edge browsers
                firstScrollableParent.scrollTop =
                    firstScrollableParent.scrollHeight -
                        firstScrollableParent.clientHeight;
            }
        }
        else {
            this.DOMService.getNativeWindow().scrollTo(0, this.DOMService.getNativeDocument().body.scrollHeight);
        }
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    getFirstScrollableParent(node) {
        /** @type {?} */
        const regex = /(auto|scroll|overlay)/;
        /** @type {?} */
        const style = (/**
         * @param {?} node
         * @param {?} prop
         * @return {?}
         */
        (node, prop) => this.DOMService.getNativeWindow()
            .getComputedStyle(node, null)
            .getPropertyValue(prop));
        /** @type {?} */
        const scroll = (/**
         * @param {?} node
         * @return {?}
         */
        (node) => regex.test(style(node, 'overflow') +
            style(node, 'overflow-y') +
            style(node, 'overflow-x')));
        /** @type {?} */
        const scrollparent = (/**
         * @param {?} node
         * @return {?}
         */
        (node) => {
            return !node || node === this.DOMService.getNativeDocument().body
                ? this.DOMService.getNativeDocument().body
                : scroll(node)
                    ? node
                    : scrollparent(node.parentNode);
        });
        return scrollparent(node);
    }
    /**
     * @private
     * @return {?}
     */
    calculateDocumentHeight() {
        /** @type {?} */
        const documentRef = this.DOMService.getNativeDocument();
        return Math.max(documentRef.body.scrollHeight, documentRef.documentElement.scrollHeight, documentRef.body.offsetHeight, documentRef.documentElement.offsetHeight, documentRef.body.clientHeight, documentRef.documentElement.clientHeight);
    }
    /**
     * @private
     * @return {?}
     */
    getScrollOffsets() {
        /** @type {?} */
        const winReference = this.DOMService.getNativeWindow();
        /** @type {?} */
        const docReference = this.DOMService.getNativeDocument();
        // This works for all browsers except IE versions 8 and before
        if (winReference.pageXOffset != null)
            return { x: winReference.pageXOffset, y: winReference.pageYOffset };
        // For IE (or any browser) in Standards mode
        if (docReference.compatMode == 'CSS1Compat')
            return {
                x: docReference.documentElement.scrollLeft,
                y: docReference.documentElement.scrollTop
            };
        // For browsers in Quirks mode
        return {
            x: docReference.body.scrollLeft,
            y: docReference.body.scrollTop
        };
    }
    /**
     * @private
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    elementsFromPoint(x, y) {
        /** @type {?} */
        var parents = [];
        /** @type {?} */
        var parent = void 0;
        do {
            /** @type {?} */
            const elem = this.DOMService.getNativeDocument().elementFromPoint(x, y);
            if (elem && parent !== elem) {
                parent = elem;
                parents.push(parent);
                parent.style.pointerEvents = 'none';
            }
            else {
                parent = false;
            }
        } while (parent);
        parents.forEach((/**
         * @param {?} parent
         * @return {?}
         */
        function (parent) {
            return (parent.style.pointerEvents = 'all');
        }));
        return parents;
    }
    /**
     * @private
     * @param {?} elements
     * @param {?} keyword
     * @return {?}
     */
    getFirstElementWithoutKeyword(elements, keyword) {
        while (elements[0] &&
            elements[0].classList.toString().includes(keyword)) {
            elements.shift();
        }
        return elements[0];
    }
}
DocumentService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DocumentService.ctorParameters = () => [
    { type: DomRefService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    DocumentService.prototype.documentHeight;
    /**
     * @type {?}
     * @private
     */
    DocumentService.prototype.DOMService;
}
//# sourceMappingURL=data:application/json;base64,