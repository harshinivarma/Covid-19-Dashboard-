/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/logger.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { JoyrideOptionsService } from './joyride-options.service';
/** @type {?} */
const JOYRIDE = 'ngx-joyride:::';
export class LoggerService {
    /**
     * @param {?} optionService
     */
    constructor(optionService) {
        this.optionService = optionService;
    }
    /**
     * @param {?=} message
     * @param {?=} data
     * @return {?}
     */
    debug(message, data = "") {
        if (this.optionService.areLogsEnabled()) {
            console.debug(JOYRIDE + message, data);
        }
    }
    /**
     * @param {?=} message
     * @param {?=} data
     * @return {?}
     */
    info(message, data = "") {
        if (this.optionService.areLogsEnabled()) {
            console.info(JOYRIDE + message, data);
        }
    }
    /**
     * @param {?=} message
     * @param {?=} data
     * @return {?}
     */
    warn(message, data = "") {
        if (this.optionService.areLogsEnabled()) {
            console.warn(JOYRIDE + message, data);
        }
    }
    /**
     * @param {?=} message
     * @param {?=} data
     * @return {?}
     */
    error(message, data = "") {
        if (this.optionService.areLogsEnabled()) {
            console.error(JOYRIDE + message, data);
        }
    }
}
LoggerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LoggerService.ctorParameters = () => [
    { type: JoyrideOptionsService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    LoggerService.prototype.optionService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtam95cmlkZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9sb2dnZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7O01BRTVELE9BQU8sR0FBRyxnQkFBZ0I7QUFHaEMsTUFBTSxPQUFPLGFBQWE7Ozs7SUFFdEIsWUFBNkIsYUFBb0M7UUFBcEMsa0JBQWEsR0FBYixhQUFhLENBQXVCO0lBQUksQ0FBQzs7Ozs7O0lBRXRFLEtBQUssQ0FBQyxPQUFnQixFQUFFLE9BQVksRUFBRTtRQUNsQyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxFQUFFLEVBQUU7WUFDckMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzFDO0lBQ0wsQ0FBQzs7Ozs7O0lBRUQsSUFBSSxDQUFDLE9BQWdCLEVBQUUsT0FBWSxFQUFFO1FBQ2pDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLEVBQUUsRUFBRTtZQUNyQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDekM7SUFDTCxDQUFDOzs7Ozs7SUFFRCxJQUFJLENBQUMsT0FBZ0IsRUFBRSxPQUFZLEVBQUU7UUFDakMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsRUFBRSxFQUFFO1lBQ3JDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztTQUN6QztJQUNMLENBQUM7Ozs7OztJQUVELEtBQUssQ0FBQyxPQUFnQixFQUFFLE9BQVksRUFBRTtRQUNsQyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxFQUFFLEVBQUU7WUFDckMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzFDO0lBQ0wsQ0FBQzs7O1lBM0JKLFVBQVU7Ozs7WUFKRixxQkFBcUI7Ozs7Ozs7SUFPZCxzQ0FBcUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEpveXJpZGVPcHRpb25zU2VydmljZSB9IGZyb20gJy4vam95cmlkZS1vcHRpb25zLnNlcnZpY2UnO1xyXG5cclxuY29uc3QgSk9ZUklERSA9ICduZ3gtam95cmlkZTo6Oic7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBMb2dnZXJTZXJ2aWNlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IG9wdGlvblNlcnZpY2U6IEpveXJpZGVPcHRpb25zU2VydmljZSkgeyB9XHJcblxyXG4gICAgZGVidWcobWVzc2FnZT86IHN0cmluZywgZGF0YTogYW55ID0gXCJcIikge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvblNlcnZpY2UuYXJlTG9nc0VuYWJsZWQoKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKEpPWVJJREUgKyBtZXNzYWdlLCBkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW5mbyhtZXNzYWdlPzogc3RyaW5nLCBkYXRhOiBhbnkgPSBcIlwiKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uU2VydmljZS5hcmVMb2dzRW5hYmxlZCgpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhKT1lSSURFICsgbWVzc2FnZSwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHdhcm4obWVzc2FnZT86IHN0cmluZywgZGF0YTogYW55ID0gXCJcIikge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvblNlcnZpY2UuYXJlTG9nc0VuYWJsZWQoKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oSk9ZUklERSArIG1lc3NhZ2UsIGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlcnJvcihtZXNzYWdlPzogc3RyaW5nLCBkYXRhOiBhbnkgPSBcIlwiKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uU2VydmljZS5hcmVMb2dzRW5hYmxlZCgpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSk9ZUklERSArIG1lc3NhZ2UsIGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0iXX0=