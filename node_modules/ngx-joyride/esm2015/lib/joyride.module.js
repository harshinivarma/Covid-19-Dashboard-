/**
 * @fileoverview added by tsickle
 * Generated from: lib/joyride.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from "@angular/core";
import { CommonModule } from "@angular/common";
import { JoyrideDirective } from './directives/joyride.directive';
import { JoyrideService } from './services/joyride.service';
import { JoyrideStepComponent } from "./components/step/joyride-step.component";
import { JoyrideButtonComponent } from "./components/button/button.component";
import { JoyrideCloseButtonComponent } from "./components/close-button/close-button.component";
import { JoyrideStepService } from "./services/joyride-step.service";
import { JoyrideBackdropService } from "./services/joyride-backdrop.service";
import { JoyrideArrowComponent } from "./components/arrow/arrow.component";
import { EventListenerService } from "./services/event-listener.service";
import { JoyrideStepsContainerService } from "./services/joyride-steps-container.service";
import { DocumentService } from "./services/document.service";
import { JoyrideOptionsService } from './services/joyride-options.service';
import { StepDrawerService } from './services/step-drawer.service';
import { DomRefService } from './services/dom.service';
import { LoggerService } from './services/logger.service';
import { RouterModule } from "@angular/router";
import { TemplatesService } from "./services/templates.service";
/** @type {?} */
export const routerModuleForChild = RouterModule.forChild([]);
export class JoyrideModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: JoyrideModule,
            providers: [
                JoyrideService,
                JoyrideStepService,
                JoyrideStepsContainerService,
                JoyrideBackdropService,
                EventListenerService,
                DocumentService,
                JoyrideOptionsService,
                StepDrawerService,
                DomRefService,
                LoggerService,
                TemplatesService
            ]
        };
    }
    /**
     * @return {?}
     */
    static forChild() {
        return {
            ngModule: JoyrideModule,
            providers: []
        };
    }
}
JoyrideModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, routerModuleForChild],
                declarations: [
                    JoyrideDirective,
                    JoyrideStepComponent,
                    JoyrideArrowComponent,
                    JoyrideButtonComponent,
                    JoyrideCloseButtonComponent
                ],
                entryComponents: [JoyrideStepComponent],
                exports: [
                    JoyrideDirective
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam95cmlkZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtam95cmlkZS8iLCJzb3VyY2VzIjpbImxpYi9qb3lyaWRlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNsRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDNUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDaEYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDOUUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDL0YsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDckUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDN0UsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDM0UsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDekUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDMUYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzlELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDOztBQUVoRSxNQUFNLE9BQU8sb0JBQW9CLEdBQXdCLFlBQVksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO0FBZ0JsRixNQUFNLE9BQU8sYUFBYTs7OztJQUN0QixNQUFNLENBQUMsT0FBTztRQUNWLE9BQU87WUFDSCxRQUFRLEVBQUUsYUFBYTtZQUN2QixTQUFTLEVBQUU7Z0JBQ1AsY0FBYztnQkFDZCxrQkFBa0I7Z0JBQ2xCLDRCQUE0QjtnQkFDNUIsc0JBQXNCO2dCQUN0QixvQkFBb0I7Z0JBQ3BCLGVBQWU7Z0JBQ2YscUJBQXFCO2dCQUNyQixpQkFBaUI7Z0JBQ2pCLGFBQWE7Z0JBQ2IsYUFBYTtnQkFDYixnQkFBZ0I7YUFDbkI7U0FDSixDQUFBO0lBQ0wsQ0FBQzs7OztJQUNELE1BQU0sQ0FBQyxRQUFRO1FBQ1gsT0FBTztZQUNILFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLFNBQVMsRUFBRSxFQUFFO1NBQ2hCLENBQUE7SUFDTCxDQUFDOzs7WUF0Q0osUUFBUSxTQUFDO2dCQUNOLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxvQkFBb0IsQ0FBQztnQkFDN0MsWUFBWSxFQUFFO29CQUNWLGdCQUFnQjtvQkFDaEIsb0JBQW9CO29CQUNwQixxQkFBcUI7b0JBQ3JCLHNCQUFzQjtvQkFDdEIsMkJBQTJCO2lCQUM5QjtnQkFDRCxlQUFlLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztnQkFDdkMsT0FBTyxFQUFFO29CQUNMLGdCQUFnQjtpQkFDbkI7YUFDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xyXG5pbXBvcnQgeyBKb3lyaWRlRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2pveXJpZGUuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgSm95cmlkZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2pveXJpZGUuc2VydmljZSc7XHJcbmltcG9ydCB7IEpveXJpZGVTdGVwQ29tcG9uZW50IH0gZnJvbSBcIi4vY29tcG9uZW50cy9zdGVwL2pveXJpZGUtc3RlcC5jb21wb25lbnRcIjtcclxuaW1wb3J0IHsgSm95cmlkZUJ1dHRvbkNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvYnV0dG9uL2J1dHRvbi5jb21wb25lbnRcIjtcclxuaW1wb3J0IHsgSm95cmlkZUNsb3NlQnV0dG9uQ29tcG9uZW50IH0gZnJvbSBcIi4vY29tcG9uZW50cy9jbG9zZS1idXR0b24vY2xvc2UtYnV0dG9uLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQgeyBKb3lyaWRlU3RlcFNlcnZpY2UgfSBmcm9tIFwiLi9zZXJ2aWNlcy9qb3lyaWRlLXN0ZXAuc2VydmljZVwiO1xyXG5pbXBvcnQgeyBKb3lyaWRlQmFja2Ryb3BTZXJ2aWNlIH0gZnJvbSBcIi4vc2VydmljZXMvam95cmlkZS1iYWNrZHJvcC5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IEpveXJpZGVBcnJvd0NvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvYXJyb3cvYXJyb3cuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7IEV2ZW50TGlzdGVuZXJTZXJ2aWNlIH0gZnJvbSBcIi4vc2VydmljZXMvZXZlbnQtbGlzdGVuZXIuc2VydmljZVwiO1xyXG5pbXBvcnQgeyBKb3lyaWRlU3RlcHNDb250YWluZXJTZXJ2aWNlIH0gZnJvbSBcIi4vc2VydmljZXMvam95cmlkZS1zdGVwcy1jb250YWluZXIuc2VydmljZVwiO1xyXG5pbXBvcnQgeyBEb2N1bWVudFNlcnZpY2UgfSBmcm9tIFwiLi9zZXJ2aWNlcy9kb2N1bWVudC5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IEpveXJpZGVPcHRpb25zU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvam95cmlkZS1vcHRpb25zLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTdGVwRHJhd2VyU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvc3RlcC1kcmF3ZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IERvbVJlZlNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2RvbS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTG9nZ2VyU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvbG9nZ2VyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XHJcbmltcG9ydCB7IFRlbXBsYXRlc1NlcnZpY2UgfSBmcm9tIFwiLi9zZXJ2aWNlcy90ZW1wbGF0ZXMuc2VydmljZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHJvdXRlck1vZHVsZUZvckNoaWxkOiBNb2R1bGVXaXRoUHJvdmlkZXJzID0gUm91dGVyTW9kdWxlLmZvckNoaWxkKFtdKTtcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCByb3V0ZXJNb2R1bGVGb3JDaGlsZF0sXHJcbiAgICBkZWNsYXJhdGlvbnM6IFtcclxuICAgICAgICBKb3lyaWRlRGlyZWN0aXZlLFxyXG4gICAgICAgIEpveXJpZGVTdGVwQ29tcG9uZW50LFxyXG4gICAgICAgIEpveXJpZGVBcnJvd0NvbXBvbmVudCxcclxuICAgICAgICBKb3lyaWRlQnV0dG9uQ29tcG9uZW50LFxyXG4gICAgICAgIEpveXJpZGVDbG9zZUJ1dHRvbkNvbXBvbmVudFxyXG4gICAgXSxcclxuICAgIGVudHJ5Q29tcG9uZW50czogW0pveXJpZGVTdGVwQ29tcG9uZW50XSxcclxuICAgIGV4cG9ydHM6IFtcclxuICAgICAgICBKb3lyaWRlRGlyZWN0aXZlXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBKb3lyaWRlTW9kdWxlIHtcclxuICAgIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5nTW9kdWxlOiBKb3lyaWRlTW9kdWxlLFxyXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICAgICAgICAgIEpveXJpZGVTZXJ2aWNlLFxyXG4gICAgICAgICAgICAgICAgSm95cmlkZVN0ZXBTZXJ2aWNlLFxyXG4gICAgICAgICAgICAgICAgSm95cmlkZVN0ZXBzQ29udGFpbmVyU2VydmljZSxcclxuICAgICAgICAgICAgICAgIEpveXJpZGVCYWNrZHJvcFNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgICBFdmVudExpc3RlbmVyU2VydmljZSxcclxuICAgICAgICAgICAgICAgIERvY3VtZW50U2VydmljZSxcclxuICAgICAgICAgICAgICAgIEpveXJpZGVPcHRpb25zU2VydmljZSxcclxuICAgICAgICAgICAgICAgIFN0ZXBEcmF3ZXJTZXJ2aWNlLFxyXG4gICAgICAgICAgICAgICAgRG9tUmVmU2VydmljZSxcclxuICAgICAgICAgICAgICAgIExvZ2dlclNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgICBUZW1wbGF0ZXNTZXJ2aWNlXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZm9yQ2hpbGQoKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmdNb2R1bGU6IEpveXJpZGVNb2R1bGUsXHJcbiAgICAgICAgICAgIHByb3ZpZGVyczogW11cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19